*buffer-ring.txt*  Circular, most-recently-used buffer navigator.     *buffer-ring*

MRU Buffer Ring Navigation~

Forker: Landon Bouma <https://tallybark.com/>
Author: Ton van den Heuvel <https://github.com/ton/>
License: MIT. See below for details.

CONTENTS                                                    *buffer-ring-contents*

 1. Introduction                |buffer-ring-introduction|
 2. Requirements                |buffer-ring-requirements|
 3. Usage                       |buffer-ring-usage|
 4. License                     |buffer-ring-license|
 5. History                     |buffer-ring-history|


INTRODUCTION                                            *buffer-ring-introduction*

A buffer navigator, similar to Vim's builtin `:bn[ext]` and `:bp[revious]`,
but rather than ordering buffers by their numbers, buffers are ordered by
how recently they were edited (i.e., by most recently used, or MRU, order).

This plugin is derived from the first great buffer navigator, vim-bufsurf:

  http://github.com/ton/vim-bufsurf

But with two tweaks:

1. Each buffer is only included once in the history list.

- In this plugin, each buffer is only listed once in the history.

  For instance, suppose the user opens the three files, 'foo', 'bar', and
  then 'baz', in that order. The history list has the following entries:
>
    [foo, bar, baz]
               ^^^
<
   where 'baz' (as indicated) is the current index. 

   If the users edits 'foo' again, rather than creating a fourth
   entry in the list, e.g.,
>
    [foo, bar, baz, foo]  # How vim-bufsurf works.
                    ^^^
<
   this plugin will remove the existing entry and reposition it, e.g.,:
>
    [bar, baz, foo]  # How this plugin, vim-buffer-ring, works.
               ^^^
<
   - The author prefers this behavior because they often use an `:edit #`
     mapping to jump back and forth between the same two buffers, which
     would otherwise end up creating a history like this:
>
      [foo, bar, baz, foo, baz, foo, baz, foo, baz, foo]  # How vim-bufsurf works.
                                                  ^^^
<
which makes walking backwards (say, to the 'bar' buffer) take longer.

2. This plugin wraps around the buffer history list, rather than
   stopping at the front or back of the list.

REQUIREMENTS                                            *buffer-ring-requirements*

This plug-in requires Vim v8.0 or greater, to take advantage of timers.

USAGE                                                          *buffer-ring-usage*

Call `BufferRingReverse` to navigate to the previous buffer in the history:
>
    :BufferRingReverse
<
Call `BufferRingForward` to navigate to the next buffer in the history:
>
    :BufferRingForward
<
You will probably want to wire this in your own Vim configuration
to whatever keys you like best.

- The author has these two commands wired to `<Ctrl-j>` and `<Ctrl-k>`, e.g.,
>
    noremap <C-j> :BufferRingReverse<CR>
    inoremap <C-j> <C-O>:BufferRingReverse<CR>
<
  and
>
    noremap <C-k> :BufferRingForward<CR>
    inoremap <C-k> <C-O>:BufferRingForward<CR>
<
Additional Commands:

Use `BufferRingList` to print the buffer history for the current window.
>
    :BufferRingList
<
Use `BufferRingClear` to clear the buffer history for the current window.
>
    :BufferRingClear
<
OPTIONS                                                      *buffer-ring-options*

To set an option, include a line like the following in your `~/.vimrc`:
>
    let g:BufferRingIgnore = '\[BufExplorer\]'
<
The following options are available:

                                                             *g:BufferRingIgnore*

    |g:BufferRingIgnore|           comma separated list of patterns (default: '')

        A comma-separated list of regular expressions used to exclude buffers.
        Any buffer whose name matches any of the regular expressions in the list
        will be excluded from the buffer history. Note that unlisted buffers are
        always excluded from the history (this includes the netrw buffer, for
        instance).

                                                             *g:BufferRingMessages*

    |g:BufferRingMessages|              Boolean value; either 0 or 1 (default: 1)

        Determines whether BufferRing messages are displayed in the status line.

LICENSE                                                      *buffer-ring-license*

Copyright 2020 Landon Bouma. All rights reserved.
Copyright 2010-2012, 2017-2019 Ton van den Heuvel. All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice,
   this list of conditions and the following disclaimer.
2. Redistributions in binary form must reproduce the above copyright notice,
   this list of conditions and the following disclaimer in the documentation
   and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR CONTRIBUTORS BE
LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
POSSIBILITY OF SUCH DAMAGE.

HISTORY                                                      *buffer-ring-history*

v1.0 (22 March 2020)

- Fork vim-bufsurf and rebrand: vim-buffer-ring.
- New policy: Only list each buffer once in the history.
- New behavior: Wrap around buffer list, rather than stopping
  at front or end of list.

v0.3 (30 March 2011)

- fix issue #2, initialize navigation history with files opened from the
  command line

v0.2 (19 March 2011)

- rewritten in vimscript (dropped Ruby dependency)
- support ignoring specific buffer names in the history bookkeeping

v0.1 (17 September 2010)

- initial public release

 vim:tw=78:ts=8:ft=help:norl:

